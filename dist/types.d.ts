export type ConnectionPoolConfiguration = {
    credentials: Array<{
        username: string;
        password: string;
    }>;
    debug?: boolean;
};
export type ZwiftAPIWrapperResponse<T> = {
    statusCode: number;
    error?: string;
    body: T | undefined;
};
export type ZwiftAuthToken = {
    access_token: string;
    refresh_token: string;
    expires_at: number;
};
export type ZwiftAPIOptions = {
    autoRefreshAuth?: boolean;
};
export type ZwiftPowerCriticalPowerProfile = {
    info: Array<{
        name: string;
        effort_id: string | number;
        hide: boolean;
    }>;
    efforts: Record<string, Array<{
        x: number;
        y: number;
        date: number;
        zid: string;
    }>>;
    events: Record<string, {
        name: string;
        zid: string;
    }>;
};
export type ZwiftPowerEventResults = {
    data: Array<ZwiftPowerEventResultsDataItem>;
};
export type ZwiftPowerEventResultsDataItem = {
    DT_RowId: string;
    name: string;
    watts: [string, number];
    wkg: [string, number];
    bpm: [string, number];
    hrm: number;
    race_time: [number, number];
    time_diff: number;
    zwid: string;
    label: string;
    dq_cat: string;
    pos: string;
    power_type: number;
    wkg_ftp: [string, number];
    wkg1200: [number, number];
    lagp: string;
    events: string;
};
export type ZwiftPowerEventViewResults = {
    data: Array<ZwiftPowerEventViewResultsDataItem>;
};
export type ZwiftPowerEventViewResultsDataItem = {
    DT_RowId: string;
    ftp: string;
    friend: 0;
    pt: string;
    label: string;
    zid: string;
    pos: number;
    position_in_cat: number;
    name: string;
    cp: number;
    zwid: number;
    res_id: string;
    lag: number;
    uid: string;
    time: [number, number];
    time_gun: number;
    gap: number;
    vtta: string;
    vttat: number;
    male: number;
    tid: string;
    topen: string;
    tname: string;
    tc: string;
    tbc: string;
    tbd: string;
    zeff: 0;
    category: string;
    height: [number, number];
    flag: string;
    avg_hr: [number, number];
    max_hr: [number, number];
    hrmax: [number, number];
    hrm: number;
    weight: [string, number];
    power_type: number;
    display_pos: number;
    src: number;
    age: string;
    zada: number;
    note: string;
    div: number;
    divw: number;
    skill: number;
    skill_b: string;
    skill_gain: number;
    np: [number, number];
    hrr: [string, number];
    hreff: [string, number];
    avg_power: [number, number];
    avg_wkg: [string, number];
    wkg_ftp: [string, number];
    wftp: [number, number];
    wkg_guess: number;
    wkg1200: [string, number];
    wkg300: [string, number];
    wkg120: [string, number];
    wkg60: [string, number];
    wkg30: [string, number];
    wkg15: [string, number];
    wkg5: [string, number];
    w1200: [string, number];
    w300: [string, number];
    w120: [string, number];
    w60: [string, number];
    w30: [string, number];
    w15: [string, number];
    w5: [string, number];
    is_guess: number;
    upg: number;
    penalty: string;
    reg: number;
    fl: string;
    pts: string;
    pts_pos: string;
    info: number;
    info_notes: unknown[];
    log: number;
    lead: number;
    sweep: number;
    actid: string;
    anal: number;
};
export type MaxPower = Record<string, number>;
export type ZwiftProfile = ZwiftShortProfile & {
    address: string | null;
    age: number;
    bodyType: number;
    connectedToStrava: boolean;
    connectedToTrainingPeaks: boolean;
    connectedToTodaysPlan: boolean;
    connectedToUnderArmour: boolean;
    connectedToWithings: boolean;
    connectedToFitbit: boolean;
    connectedToGarmin: boolean;
    connectedToRuntastic: boolean;
    connectedToZwiftPower: boolean;
    stravaPremium: false;
    bt: string;
    dob: string;
    emailAddress: string;
    height: number;
    location: string;
    preferredLanguage: string;
    mixpanelDistinctId: string;
    profileChanges: boolean;
    weight: number;
    b: boolean;
    createdOn: string;
    source: string;
    origin: unknown | null;
    launchedGameClient: string;
    ftp: number;
    userAgent: string;
    runTime1miInSeconds: number;
    runTime5kmInSeconds: number;
    runTime10kmInSeconds: number;
    runTimeHalfMarathonInSeconds: number;
    runTimeFullMarathonInSeconds: number;
    cyclingOrganization: unknown | null;
    licenseNumber: unknown | null;
    bigCommerceId: unknown | null;
    marketingConsent: boolean;
    publicAttributes: Record<string, string>;
    privateAttributes: Record<string, string>;
    achievementLevel: number;
    totalDistance: number;
    totalDistanceClimbed: number;
    totalTimeInMinutes: number;
    totalInKomJersey: number;
    totalInSprintersJersey: number;
    totalInOrangeJersey: number;
    totalWattHours: number;
    totalExperiencePoints: number;
    targetExperiencePoints: number;
    totalGold: number;
    runAchievementLevel: number;
    totalRunDistance: number;
    totalRunTimeInMinutes: number;
    totalRunExperiencePoints: number;
    targetRunExperiencePoints: number;
    totalRunCalories: number;
    powerSourceType: string;
    powerSourceModel: string;
    virtualBikeModel: string;
    numberOfFolloweesInCommon: number;
    affiliate: unknown | null;
    avantlinkId: unknown | null;
    fundraiserId: unknown | null;
    profilePropertyChanges: Array<{
        propertyName: string;
        changeCount: number;
        maxChanges: number;
    }>;
};
export type ZwiftShortProfile = {
    id: number;
    publicId: string;
    firstName: string;
    lastName: string;
    male: boolean;
    eventCategory: string;
    imageSrc: string | null;
    imageSrcLarge: string | null;
    playerType: string;
    countryAlpha3: string;
    countryCode: number;
    useMetric: boolean;
    riding: boolean;
    privacy: {
        approvalRequired: boolean;
        displayWeight: boolean;
        minor: boolean;
        privateMessaging: boolean;
        defaultFitnessDataPrivacy: boolean;
        suppressFollowerNotification: boolean;
        displayAge: boolean;
        defaultActivityPrivacy: string;
    };
    socialFacts: {
        profileId: number;
        followersCount: number;
        followeesCount: number;
        followeesInCommonWithLoggedInPlayer: number;
        followerStatusOfLoggedInPlayer: string;
        followeeStatusOfLoggedInPlayer: string;
        isFavoriteOfLoggedInPlayer: boolean;
    } | null;
    worldId: number | null;
    enrolledZwiftAcademy: boolean;
    playerTypeId: number;
    playerSubTypeId: number | null;
    currentActivityId: number | null;
    likelyInGame: boolean;
};
export type ZwiftProfilePowerCurve = {
    zftp: number;
    zmap: number;
    vo2max: number;
    validPowerProfile: boolean;
    cpBestEfforts: {
        pointsWatts: Record<string, {
            value: number;
            date: string;
        }>;
        pointsWattsPerKg: Record<string, {
            value: number;
            date: string;
        }>;
    };
    relevantCpEfforts: Array<{
        watts: number;
        wattsKg: number;
        cpLabel: string;
        duration: number;
        cpTimestamp: string;
    }>;
    category: string;
    categoryWomen: string;
    categoryIndex: number;
    categoryWomenIndex: number;
    displayFemaleCategory: boolean;
    powerCompoundScore: number;
    weightInGrams: number;
    metricsTimestamp: string;
};
export type ZwiftPowerActivityResults = {
    data: ZwiftPowerActivityResult[];
};
export type ZwiftPowerActivityResult = {
    DT_RowId: string;
    ftp: string;
    friend: number;
    pt: string;
    label: string;
    zid: string;
    pos: number;
    position_in_cat: number;
    name: string;
    cp: number;
    zwid: number;
    res_id: string;
    lag: number;
    uid: string;
    time: [number, number];
    time_gun: number;
    gap: number;
    vtta: string;
    vttat: number;
    male: number;
    tid: string;
    topen: string;
    tname: string;
    tc: string;
    tbc: string;
    tbd: string;
    zeff: number;
    category: string;
    height: [number, number];
    flag: string;
    avg_hr: [number, number];
    max_hr: [number, number];
    hrmax: [number, number];
    hrm: number;
    weight: [string, number];
    power_type: 3;
    display_pos: 1;
    src: 1;
    age: string;
    zada: number;
    note: string;
    div: number;
    divw: number;
    skill: string;
    skill_b: number;
    skill_gain: string;
    np: [number, number];
    hrr: [string, number];
    hreff: [string, number];
    avg_power: [number, number];
    avg_wkg: [string, number];
    wkg_ftp: [string, number];
    wftp: [number, number];
    wkg_guess: number;
    wkg1200: [string, number];
    wkg300: [string, number];
    wkg120: [string, number];
    wkg60: [string, number];
    wkg30: [string, number];
    wkg15: [string, number];
    wkg5: [string, number];
    w1200: [string, number];
    w300: [string, number];
    w120: [string, number];
    w60: [string, number];
    w30: [string, number];
    w15: [string, number];
    w5: [string, number];
    is_guess: number;
    upg: number;
    penalty: string;
    reg: number;
    fl: string;
    pts: string;
    pts_pos: string;
    info: number;
    info_notes: unknown[];
    strike: number;
    event_title: string;
    f_t: string;
    distance: number;
    event_date: number;
    rt: string;
    laps: string;
    dur: string;
};
export type ZwiftPowerActivityAnalysis = {
    xData: number[];
    x2Data: number[];
    vars: {
        start: number;
    };
    datasets: Record<string, ZwiftPowerActivityAnalysisDataset>;
};
export type ZwiftPowerActivityAnalysisDataset = {
    data: number[];
    name: boolean;
    type: string;
    unit: string;
    linecolor: string;
    color: string;
    height: number;
    xaxis: boolean;
    format_time: boolean;
};
export type ZwiftActivities = Array<ZwiftActivitySummary>;
export type ZwiftActivitySummary = {
    id_str: string;
    id: number;
    profileId: number;
    profile: ZwiftShortProfile;
    worldId: number;
    name: string;
    description?: string | null;
    privateActivity: boolean;
    sport: string;
    startDate: string;
    endDate: string;
    lastSaveDate: string;
    autoClosed: boolean;
    duration: string;
    distanceInMeters: number;
    fitFileBucket: string;
    fitFileKey: string;
    totalElevation: number;
    avgWatts: number;
    rideOnGiven: boolean;
    activityRideOnCount: number;
    activityCommentCount: number;
    snapshotList: unknown | null;
    calories: number;
    primaryImageUrl?: string | null;
    movingTimeInMs: number;
    privacy: string;
};
export type ZwiftEvent = {
    id: number;
    worldId: number;
    name: string;
    description: string;
    shortName: string | null;
    shortDescription: string;
    imageUrl: string;
    rulesId: number;
    mapId: number;
    routeId: number;
    routeUrl: string | null;
    jerseyHash: number;
    bikeHash: number | null;
    visible: boolean;
    overrideMapPreferences: boolean;
    eventStart: string;
    durationInSeconds: number;
    distanceInMeters: number;
    laps: number;
    privateEvent: boolean;
    invisibleToNonParticipants: boolean;
    followeeEntrantCount: number;
    totalEntrantCount: number;
    followeeSignedUpCount: number;
    totalSignedUpCount: number;
    followeeJoinedCount: number;
    totalJoinedCount: number;
    eventSubgroups: Array<ZwiftEventSubgroup>;
    eventSeries: {
        id: number;
        name: string;
        description: string | null;
        imported: boolean;
    };
    auxiliaryUrl: string;
    imageS3Name: string | null;
    imageS3Bucket: string | null;
    sport: string;
    cullingType: string;
    rulesSet: string[];
    recurring: boolean;
    recurringOffset: unknown | null;
    publishRecurring: boolean;
    parentId: number;
    type: string;
    workoutHash: number | null;
    customUrl: string;
    restricted: boolean;
    unlisted: boolean;
    eventSecret: unknown | null;
    accessExpression: unknown | null;
    tags: string[];
    qualificationRuleIds: unknown | null;
    lateJoinInMinutes: number;
    timeTrialOptions: unknown | null;
    microserviceName: unknown | null;
    microserviceExternalResourceId: unknown | null;
    microserviceEventVisibility: unknown | null;
    minGameVersion: unknown | null;
    recordable: boolean;
    imported: boolean;
    eventTemplateId: unknown | null;
    categoryEnforcement: boolean;
    rangeAccessLabel: unknown | null;
    eventType: string;
};
export type ZwiftEventSubgroup = {
    id: number;
    name: string;
    description: string;
    label: number;
    subgroupLabel: string;
    rulesId: number;
    mapId: number;
    routeId: number;
    routeUrl: string | null;
    jerseyHash: number;
    bikeHash: number | null;
    startLocation: number;
    invitedLeaders: unknown[];
    invitedSweepers: unknown[];
    paceType: number;
    fromPaceValue: number;
    toPaceValue: number;
    fieldLimit: number | null;
    registrationStart: string;
    registrationEnd: string;
    lineUpStart: string;
    lineUpEnd: string;
    eventSubgroupStart: string;
    durationInSeconds: number;
    laps: number;
    distanceInMeters: number;
    signedUp: boolean;
    signupStatus: number;
    registered: boolean;
    registrationStatus: number;
    followeeEntrantCount: number;
    totalEntrantCount: number;
    followeeSignedUpCount: number;
    totalSignedUpCount: number;
    followeeJoinedCount: number;
    totalJoinedCount: number;
    auxiliaryUrl: string;
    rulesSet: string[];
    workoutHash: number | null;
    customUrl: string;
    overrideMapPreferences: boolean;
    tags: string[];
    lateJoinInMinutes: number;
    timeTrialOptions: unknown | null;
    qualificationRuleIds: number | null;
    accessValidationResult: unknown | null;
    accessRules: string[];
    rangeAccessLabel: unknown | null;
};
export type ZwiftActivity = {
    activityRideOns: unknown[];
    avgHeartRate: number;
    maxHeartRate: number;
    maxWatts: number;
    avgCadenceInRotationsPerMinute: number;
    maxCadenceInRotationsPerMinute: number;
    avgSpeedInMetersPerSecond: number;
    maxSpeedInMetersPerSecond: number;
    percentageCompleted: number;
    snapshotThumbnails: unknown[];
    overriddenFitnessPrivate: string;
    notableMoments: Array<{
        notableMomentTypeId: number;
        activityId: number;
        incidentTime: number;
        priority: number;
        aux1: string;
        aux2: string;
    }>;
    fitnessData: {
        status: string;
        fullDataUrl: string;
        smallDataUrl: string;
    };
    rideOnTimes: number[];
    socialInteractions: Array<{
        profile: {
            id_str: string;
            id: number;
            publicId: string;
            firstName: string;
            lastName: string;
            imageSrc: string;
            imageSrcLarge: string;
            countryCode: number;
            playerType: string;
            socialFacts: {
                followerStatusOfLoggedInPlayer: string;
                isFavoriteOfLoggedInPlayer: boolean;
            };
        };
        proximityTimeScore: number;
        timeDuration: number;
    }>;
    eventInfo?: {
        id: number;
        eventSubGroupId: number;
        imageUrl: string;
        name: string;
        durationInSeconds: number;
        distanceInMeters: number;
        laps: number;
        sport: string;
        followeeEntrantCount: number;
        subgroupTotalEntrantCount: number;
        subgroupEventLabel: number;
        eventSubgroups: Array<{
            id: number;
            name: string;
            label: number;
        }>;
    };
    profileFtp: number;
    profileMaxHeartRate: number;
    subgroupResults: {
        topResults: ZwiftActivityAthleteResult[];
        nearPlayerResults: ZwiftActivityAthleteResult[];
    };
    clubId: string;
    clubAttributions: unknown[];
};
export type ZwiftActivityAthleteResult = {
    profile: {
        id_str: string;
        id: number;
        publicId: string;
        firstName: string;
        lastName: string;
        imageSrc: string;
        imageSrcLarge: string;
        countryCode: number;
        playerType: string;
    };
    durationInMilliseconds: number;
    segmentDistanceInCentimeters: number;
    weightInGrams: number;
    avgWatts: number;
    avgHeartRate: number;
    rank: number;
    rankingValue: number;
    rankingValueWinnerDifference: number;
    timePenaltyMs: number | null;
    activityId: number;
    activityId_str: string;
    powerType: string;
};
export type ZwiftGameInfo = {
    gameInfoHash: string;
    maps: ZwiftGameInfoMap[];
    schedules: ZwiftGameInfoSchedule[];
    achievements: ZwiftGameInfoResources[];
    unlockableCategories: ZwiftGameInfoResources[];
    missions: unknown[];
    challenges: ZwiftGameInfoResources[];
    jerseys: ZwiftGameInfoResources[];
    notableMomentTypes: ZwiftGameInfoNotableMomentType[];
    trainingPlans: ZwiftGameInfoResources[];
    bikeFrames: ZwiftGameInfoBikeFrame[];
    segments: ZwiftGameInfoSegment[];
};
export type ZwiftGameInfoResources = {
    id: number;
    name: string;
    imageUrl: string;
};
export type ZwiftGameInfoMap = {
    name: string;
    routes: ZwiftGameInfoMapRoute[];
};
export type ZwiftGameInfoMapRoute = {
    name: string;
    id: number;
    distanceInMeters: number;
    distanceInMetersFromEventStart: number;
    ascentInMeters: number;
    locKey: string;
    imageUrl: string;
    levelLocked: number;
    publicEventsOnly: boolean;
    supportedLaps: true;
    leadinAscentInMeters: number;
    leadinDistanceInMeters: number;
    meetupLeadinAscentInMeters: number;
    meetupLeadinDistanceInMeters: number;
    freeRideLeadinAscentInMeters: number;
    freeRideLeadinDistanceInMeters: number;
    blockedForMeetups: number;
    xp: number;
    duration: number;
    difficulty: number;
    sports: string[];
};
export type ZwiftGameInfoSchedule = {
    map: string;
    start: string;
};
export type ZwiftGameInfoNotableMomentType = {
    id: number;
    name: string;
    listImageUrl: string;
    mapImageUrl: string;
    priority: number;
};
export type ZwiftGameInfoBikeFrame = {
    id: number;
    name: string;
};
export type ZwiftGameInfoSegment = {
    archFriendlyName: string;
    archFriendlyFemaleName: string;
    id: number;
    archId: number;
    direction: string;
    roadId: number;
    roadTime: number;
    world: number;
    jerseyName: string;
    jerseyIconPath: string;
    onRoutes: number[];
};
export type ZwiftAthleteFollow = {
    id: number;
    followerId: number;
    followeeId: number;
    status: string;
    isFolloweeFavoriteOfFollower: boolean;
    followerProfile: ZwiftShortProfile | null;
    followeeProfile: ZwiftShortProfile | null;
};
export type ZwiftNotification = {
    id: number;
    fromProfile: null | {
        id: number;
        publicId: string;
        firstName: string;
        lastName: string;
        imageSrc: string;
        imageSrcLarge: string;
        socialFacts: {
            followerStatusOfLoggedInPlayer: string;
            followeeStatusOfLoggedInPlayer: string;
            favoriteOfLoggedInPlayer: boolean;
        };
    };
    type: string;
    read: boolean;
    readDate: string | null;
    createdOn: string;
    lastModified: string | null;
    activity: {
        id_str: string;
        id: number;
        profileId: number;
        worldId: number;
        name: string;
        privateActivity: boolean;
        sport: string;
        startDate: string;
        endDate: string;
        lastSaveDate: string;
        autoClosed: boolean;
        duration: string;
        distanceInMeters: number;
        totalElevation: number;
        avgWatts: number;
        rideOnGiven: boolean;
        activityRideOnCount: number;
        activityCommentCount: number;
        calories: number;
        movingTimeInMs: number;
        privacy: "PUBLIC";
        activityRideOns: unknown[];
        avgHeartRate: number;
        maxHeartRate: number;
        maxWatts: number;
        avgCadenceInRotationsPerMinute: number;
        maxCadenceInRotationsPerMinute: number;
        avgSpeedInMetersPerSecond: number;
        maxSpeedInMetersPerSecond: number;
        percentageCompleted: number;
        overriddenFitnessPrivate: string;
    };
    argLong0: number;
    argLong1: number;
    argString0: string;
};
export type ZwiftActivityFitnessData = {
    powerInWatts: number[];
    cadencePerMin: number[];
    heartRate: number[];
    distanceInCm: number[];
    speedInCmPerSec: number[];
    timeInSec: number[];
    altitudeInCm: number[];
    latlng: Array<[number, number]>;
};
export type ZwiftActivityFeed = {
    id: number;
    id_str: string;
    profile: {
        id: string;
        firstName: string;
        lastName: string;
        imageSrc: string;
        approvalRequired: unknown | null;
    };
    worldId: number;
    name: string;
    sport: string;
    startDate: string;
    endDate: string;
    distanceInMeters: number;
    totalElevation: number;
    calories: number;
    primaryImageUrl: string;
    feedImageThumbnailUrl: string;
    lastSaveDate: string;
    movingTimeInMs: number;
    avgSpeedInMetersPerSecond: number;
    activityRideOnCount: number;
    activityCommentCount: number;
    privacy: string;
    eventId: string | number | null;
    rideOnGiven: boolean;
};
